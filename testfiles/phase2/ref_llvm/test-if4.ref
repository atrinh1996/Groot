; ModuleID = 'gROOT'
source_filename = "gROOT"

%anon1_struct = type { i32 (i32)*, i32 }
%anon0_struct = type { i32 (i32)*, i32 }

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@boolT = private unnamed_addr constant [3 x i8] c"#t\00", align 1
@boolF = private unnamed_addr constant [3 x i8] c"#f\00", align 1
@_anon0_1 = global i32 (i32)* null
@_anon1_1 = global i32 (i32)* null
@_n_1 = global i32 0
@_retn_1 = global %anon1_struct* null
@_retx_1 = global %anon0_struct* null
@_x_1 = global i32 0

declare i32 @printf(i8*, ...)

declare i32 @puts(i8*)

define i32 @main() {
entry:
  store i32 1997, i32* @_x_1
  %gstruct = alloca %anon0_struct
  %funcField = getelementptr inbounds %anon0_struct, %anon0_struct* %gstruct, i32 0, i32 0
  store i32 (i32)* @anon0, i32 (i32)** %funcField
  %_x_1 = load i32, i32* @_x_1
  %freeField = getelementptr inbounds %anon0_struct, %anon0_struct* %gstruct, i32 0, i32 1
  store i32 %_x_1, i32* %freeField
  store %anon0_struct* %gstruct, %anon0_struct** @_retx_1
  %_retx_1 = load %anon0_struct*, %anon0_struct** @_retx_1
  %freePtr = getelementptr inbounds %anon0_struct, %anon0_struct* %_retx_1, i32 0, i32 1
  %freeVal = load i32, i32* %freePtr
  %function_access = getelementptr inbounds %anon0_struct, %anon0_struct* %_retx_1, i32 0, i32 0
  %function_call = load i32 (i32)*, i32 (i32)** %function_access
  %function_result = call i32 %function_call(i32 %freeVal)
  %printi = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %function_result)
  store i32 2014, i32* @_n_1
  %gstruct1 = alloca %anon1_struct
  %funcField2 = getelementptr inbounds %anon1_struct, %anon1_struct* %gstruct1, i32 0, i32 0
  store i32 (i32)* @anon1, i32 (i32)** %funcField2
  %_n_1 = load i32, i32* @_n_1
  %freeField3 = getelementptr inbounds %anon1_struct, %anon1_struct* %gstruct1, i32 0, i32 1
  store i32 %_n_1, i32* %freeField3
  store %anon1_struct* %gstruct1, %anon1_struct** @_retn_1
  %_retn_1 = load %anon1_struct*, %anon1_struct** @_retn_1
  %freePtr4 = getelementptr inbounds %anon1_struct, %anon1_struct* %_retn_1, i32 0, i32 1
  %freeVal5 = load i32, i32* %freePtr4
  %function_access6 = getelementptr inbounds %anon1_struct, %anon1_struct* %_retn_1, i32 0, i32 0
  %function_call7 = load i32 (i32)*, i32 (i32)** %function_access6
  %function_result8 = call i32 %function_call7(i32 %freeVal5)
  %printi9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %function_result8)
  %if-res-ptr = alloca i32
  br i1 true, label %then, label %else

merge:                                            ; preds = %else, %then
  %if-res-val = load i32, i32* %if-res-ptr
  %printi22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %if-res-val)
  %if-res-ptr23 = alloca i32
  br i1 true, label %then25, label %else33

then:                                             ; preds = %entry
  %_retn_110 = load %anon1_struct*, %anon1_struct** @_retn_1
  %freePtr11 = getelementptr inbounds %anon1_struct, %anon1_struct* %_retn_110, i32 0, i32 1
  %freeVal12 = load i32, i32* %freePtr11
  %function_access13 = getelementptr inbounds %anon1_struct, %anon1_struct* %_retn_110, i32 0, i32 0
  %function_call14 = load i32 (i32)*, i32 (i32)** %function_access13
  %function_result15 = call i32 %function_call14(i32 %freeVal12)
  store i32 %function_result15, i32* %if-res-ptr
  br label %merge

else:                                             ; preds = %entry
  %_retx_116 = load %anon0_struct*, %anon0_struct** @_retx_1
  %freePtr17 = getelementptr inbounds %anon0_struct, %anon0_struct* %_retx_116, i32 0, i32 1
  %freeVal18 = load i32, i32* %freePtr17
  %function_access19 = getelementptr inbounds %anon0_struct, %anon0_struct* %_retx_116, i32 0, i32 0
  %function_call20 = load i32 (i32)*, i32 (i32)** %function_access19
  %function_result21 = call i32 %function_call20(i32 %freeVal18)
  store i32 %function_result21, i32* %if-res-ptr
  br label %merge

merge24:                                          ; preds = %else33, %then25
  %if-res-val41 = load i32, i32* %if-res-ptr23
  ret i32 0

then25:                                           ; preds = %merge
  %_retx_126 = load %anon0_struct*, %anon0_struct** @_retx_1
  %freePtr27 = getelementptr inbounds %anon0_struct, %anon0_struct* %_retx_126, i32 0, i32 1
  %freeVal28 = load i32, i32* %freePtr27
  %function_access29 = getelementptr inbounds %anon0_struct, %anon0_struct* %_retx_126, i32 0, i32 0
  %function_call30 = load i32 (i32)*, i32 (i32)** %function_access29
  %function_result31 = call i32 %function_call30(i32 %freeVal28)
  %printi32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %function_result31)
  store i32 %printi32, i32* %if-res-ptr23
  br label %merge24

else33:                                           ; preds = %merge
  %_retn_134 = load %anon1_struct*, %anon1_struct** @_retn_1
  %freePtr35 = getelementptr inbounds %anon1_struct, %anon1_struct* %_retn_134, i32 0, i32 1
  %freeVal36 = load i32, i32* %freePtr35
  %function_access37 = getelementptr inbounds %anon1_struct, %anon1_struct* %_retn_134, i32 0, i32 0
  %function_call38 = load i32 (i32)*, i32 (i32)** %function_access37
  %function_result39 = call i32 %function_call38(i32 %freeVal36)
  %printi40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %function_result39)
  store i32 %printi40, i32* %if-res-ptr23
  br label %merge24
}

define i32 @anon1(i32 %_n_1) {
entry:
  %_n_11 = alloca i32
  store i32 %_n_1, i32* %_n_11
  %_n_12 = load i32, i32* %_n_11
  ret i32 %_n_12
}

define i32 @anon0(i32 %_x_1) {
entry:
  %_x_11 = alloca i32
  store i32 %_x_1, i32* %_x_11
  %_x_12 = load i32, i32* %_x_11
  ret i32 %_x_12
}
