(val x 1996)
(val retn (lambda (n m) n))
(val retx (lambda () (retn x 9)))
(printi (retx)) 			(; 1996 ;)

(val x 2004) 				(; redefine x -- same type, new value ;)
(printi (retx))				(; 1996 ;)
(val retx (lambda () (retn x 10)))	(; redefine a closure -- new "type" ;)
(printi (retx)) 			(; 2004 ;)

(val x 42)				(; redefine x -- same type, new value ;)
(val retx (lambda (a) 			(; redefine a closure -- new and different type ;)
		(lambda (b) 
			x)))
(printi ((retx 6) 12))			(; 42 ;)

(;
(val x 42)
(val retn (lambda (n m) n))
(printi (retn x 9))
;)

(;
(val retx (lambda () (retn x 9)))
;)


(;

(val x 17)

(val testAB (lambda (a) 
		(lambda (b) 
			x)))
(testAB 5)
((testAB 20) 12)
(printi ((testAB 20) 12))

(val x 42)
(val retx (lambda () x))
(printi (retx))

;)



(;
(val retx (lambda () x))
(val retn (lambda (n m) n))
 ;)
(;
(printi x)

;)



(;
(val ret4 (lambda () 4))
(val call4 (lambda () (ret4)))
(printi (call4))

(val x 17)
(val retx (lambda () x))
(val takenthenx (lambda (n) (retx)))
(printi (takenthenx 9))

(val ret4 (lambda () 16))
(printi (ret4))
;)



(; prints 42 42 12 12 
(val x 42)
(val retx (lambda () x))
(printi (retx))

(val x 12)
(printi (retx))
(val retx (lambda () x))
(printi (retx)) 

(val retx2 (lambda (n m) x))

(printi (retx2 9 8))
;)



(;
((if #t retx retn))

(if #t (printi 1) (printi 0))
x

(printi x)

(val x 12)

x

(printi x)


(val retn (lambda (n m) n))

(printi (retn x 9))
(printi (retn 7 9))
;)



(;
(retn 14 x)
;)

(;
retn

;)

(;
(val retx (lambda (a) (retn x a)))

(val y (retx 3))

(val x 5)

(val retn (lambda (m n) n))

(val rety (lambda () (retn x y)))

(retx 8)

(lambda (t) t)

(val test (lambda (a) 
		(lambda (b) (retn a b))))
		
(val test1 (lambda () (rety)))

(test1)

(val take3 (lambda (i j k) i))

(val fun1 (lambda (a) 
		(lambda (b) 
			(lambda (c) (take3 a b c)))))

((if #t retx retn))
;)

(; 

(val test (lambda (a) 
		(lambda (b) (+ a b)))) 
(test 5) ;; returns a function: (lambda (b) (+ 5 b))
((test 5) 9) ;; returns result of (+ 5 9)

(val foo (lambda (a) 
		(lambda (b) (f a b))))

(foo 1) 
((foo 1) 2)

int main() {
	struct x = test(5) ;; { fptr = lambda1; frees = [5] }
	
	struct y1 = test(5) ;; { fptr = lambda1; frees = [5] } 
	int y2 = y1.fptr(9, y1.a)
	
	struct z1 = foo(1) ;; { fptr = lambda2; frees = [1, f] }
	int z2 = z1.fptr(2, 1, f)
}

int lambda1 (int b, int a) {
	return a + b
}

int test (int a) {
	struct x = { fptr = lambda1; frees = [a] }
	ret x
}

int lambda2 (int b, int a, fptr f) {
	res = f(a, b) 
	ret res
}

int foo (int a, int (int int)* f) {
	struct x = { fptr = lambda2; frees = [a, f] } 
	ret x
}

;)






